/**
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia2023.mycs.formatting2;

import chartitproject.Chart;
import chartitproject.ColumnRef;
import chartitproject.Condition;
import chartitproject.DataFile;
import chartitproject.Program;
import com.google.inject.Inject;
import fr.unice.cotedazur.l3ia2023.mycs.services.ChartDslGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ChartDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ChartDslGrammarAccess _chartDslGrammarAccess;
  
  protected void _format(final Program program, @Extension final IFormattableDocument document) {
    document.<DataFile>format(program.getCsvFile());
    EList<Chart> _chart = program.getChart();
    for (final Chart chart : _chart) {
      document.<Chart>format(chart);
    }
  }
  
  protected void _format(final Chart chart, @Extension final IFormattableDocument document) {
    EList<ColumnRef> _xVariable = chart.getXVariable();
    for (final ColumnRef columnRef : _xVariable) {
      document.<ColumnRef>format(columnRef);
    }
    EList<ColumnRef> _yVariable = chart.getYVariable();
    for (final ColumnRef columnRef_1 : _yVariable) {
      document.<ColumnRef>format(columnRef_1);
    }
    EList<Condition> _filter = chart.getFilter();
    for (final Condition condition : _filter) {
      document.<Condition>format(condition);
    }
  }
  
  public void format(final Object chart, final IFormattableDocument document) {
    if (chart instanceof XtextResource) {
      _format((XtextResource)chart, document);
      return;
    } else if (chart instanceof Chart) {
      _format((Chart)chart, document);
      return;
    } else if (chart instanceof Program) {
      _format((Program)chart, document);
      return;
    } else if (chart instanceof EObject) {
      _format((EObject)chart, document);
      return;
    } else if (chart == null) {
      _format((Void)null, document);
      return;
    } else if (chart != null) {
      _format(chart, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(chart, document).toString());
    }
  }
}
