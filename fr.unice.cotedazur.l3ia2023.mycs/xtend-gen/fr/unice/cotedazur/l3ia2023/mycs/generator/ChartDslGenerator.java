/**
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia2023.mycs.generator;

import chartitproject.Chart;
import chartitproject.Column;
import chartitproject.ColumnRef;
import chartitproject.Condition;
import chartitproject.Constant;
import chartitproject.DoubleVariable;
import chartitproject.IntVariable;
import chartitproject.Program;
import chartitproject.StringVariable;
import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class ChartDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IteratorExtensions.<EObject>head(resource.getAllContents());
    final Program root = ((Program) _head);
    final String commonDefaultMissingValue = "unknown";
    final String program = root.getName();
    final String csvDelimiter = root.getCsvFile().getSeparator();
    final boolean hasHeader = root.getCsvFile().isHasHeader();
    final boolean hasType = root.getCsvFile().isHasType();
    final String filePath = root.getCsvFile().getFilePath();
    final EList<Column> columns = root.getCsvFile().getUsedColumn();
    final EList<Chart> charts = root.getChart();
    ArrayList<ArrayList<String>> list = this.readCSV(filePath, csvDelimiter, commonDefaultMissingValue);
    StringBuilder content = new StringBuilder("");
    for (int i = 0; (i < list.size()); i++) {
      {
        StringBuilder sb = new StringBuilder();
        for (int j = 0; (j < list.get(i).size()); j++) {
          {
            boolean _isEmpty = sb.toString().isEmpty();
            boolean _not = (!_isEmpty);
            if (_not) {
              sb.append(", ");
            }
            sb.append(list.get(i).get(j));
          }
        }
        sb.append("\n");
        content.append(sb);
      }
    }
    final String jsonData = this.createJsonData(list, columns, csvDelimiter, commonDefaultMissingValue);
    final String jsScript = this.generateGraphJsScript(charts.get(0));
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("<title>");
    String _name = root.getName();
    _builder.append(_name, "  ");
    _builder.append("</title>");
    _builder.newLineIfNotEmpty();
    _builder.append("  ");
    _builder.append("<style>");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("/* Resets */");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("* {");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("margin: 0;");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("padding: 0;");
    _builder.newLine();
    _builder.append("     ");
    _builder.append("box-sizing: border-box;");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("h1 {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("text-align: center;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("line-height: 100px;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("margin: 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("section {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("height: 100%;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("padding: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("margin: 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("display: flex;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("align-items: center;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("justify-content: center;");
    _builder.newLine();
    _builder.append("} ");
    _builder.newLine();
    _builder.newLine();
    _builder.append("  ");
    _builder.append("#chartCard {");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("width:auto;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("background: rgba(255, 255, 255, 1);");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("display: flex;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("align-items: center; ");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("justify-content: center;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("flex-wrap: wrap;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("  ");
    _builder.newLine();
    _builder.append("  ");
    _builder.append(".myChartBox{");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("width: 700px;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("padding:20px;");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("border: solid 3px rgba(232, 244, 248, 1);");
    _builder.newLine();
    _builder.append("  \t");
    _builder.append("background: white;");
    _builder.newLine();
    _builder.append("  ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("   ");
    _builder.append("</style> ");
    _builder.newLine();
    _builder.append("</head>");
    _builder.newLine();
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("<h1> ChartIT Project </h1>");
    _builder.newLine();
    _builder.append("<section>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<div  id=\"chartCard\">");
    _builder.newLine();
    {
      List<String> _generateChartIdName = this.generateChartIdName(charts);
      for(final String id : _generateChartIdName) {
        _builder.append("\t\t");
        _builder.append("<div class=\"myChartBox\">");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.append("\t");
        _builder.append("<canvas id=\"myChart");
        _builder.append(id, "\t\t\t");
        _builder.append("\"></canvas>");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        _builder.append("</div>");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("</section>");
    _builder.newLine();
    _builder.append("<script src=\"https://cdn.jsdelivr.net/npm/chart.js\"></script>");
    _builder.newLine();
    _builder.append("<!-- <script src=\"https://raw.githubusercontent.com/chartjs/Chart.js/master/docs/scripts/utils.js\"></script> -->");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<script>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// Default json data based on selected column");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(jsonData, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("// filter data\t\t\t");
    _builder.newLine();
    {
      for(final Chart chart : charts) {
        {
          int _size = chart.getFilter().size();
          boolean _greaterThan = (_size > 0);
          if (_greaterThan) {
            _builder.append("\t");
            String _filteredData = this.filteredData(chart);
            _builder.append(_filteredData, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    {
      for(final Chart chart_1 : charts) {
        _builder.append("\t");
        String _generateGraphJsScript = this.generateGraphJsScript(chart_1);
        _builder.append(_generateGraphJsScript, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append("</script>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    String html = _builder.toString();
    fsa.generateFile((program + ".html"), html);
  }
  
  public List<String> generateChartIdName(final EList<Chart> charts) {
    List<String> idsName = new ArrayList<String>();
    for (final Chart chart : charts) {
      {
        String type = chart.getType().getName().toLowerCase();
        String _upperCase = type.substring(0, 1).toUpperCase();
        String _substring = type.substring(1);
        String id = (_upperCase + _substring);
        idsName.add(id);
      }
    }
    return idsName;
  }
  
  public String filteredData(final Chart chart) {
    final Map<String, String> compOperators = new HashMap<String, String>();
    compOperators.put("GREATER", ">");
    compOperators.put("LESS", "<");
    compOperators.put("EQUAL", "===");
    compOperators.put("NOT_EQUAL", "!==");
    compOperators.put("GREATER_OR_EQUAL", ">=");
    compOperators.put("LESS_OR_EQUAL", ">=");
    EList<Condition> filters = chart.getFilter();
    String type = chart.getType().getName().toLowerCase();
    List<String> conditions = new ArrayList<String>();
    for (final Condition cond : filters) {
      {
        String _name = cond.getLeftElement().getMakeRefTo().getName();
        String _plus = ("row." + _name);
        final StringBuilder c = new StringBuilder(_plus).append(" ");
        c.append(compOperators.get(cond.getOperator().getName())).append(" ");
        Constant _rightElement = cond.getRightElement();
        if ((_rightElement instanceof IntVariable)) {
          Constant _rightElement_1 = cond.getRightElement();
          c.append(((IntVariable) _rightElement_1).getInitialValue());
        } else {
          Constant _rightElement_2 = cond.getRightElement();
          if ((_rightElement_2 instanceof StringVariable)) {
            Constant _rightElement_3 = cond.getRightElement();
            c.append("\"").append(((StringVariable) _rightElement_3).getInitialValue()).append("\"");
          } else {
            Constant _rightElement_4 = cond.getRightElement();
            c.append(((DoubleVariable) _rightElement_4).getInitialValue());
          }
        }
        conditions.add(c.toString());
      }
    }
    String _upperCase = type.substring(0, 1).toUpperCase();
    String _substring = type.substring(1);
    final String camelType = (_upperCase + _substring);
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("const filteredData");
    _builder.append(camelType);
    _builder.append(" = data.filter(row => {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("if (");
    String _join = IterableExtensions.join(conditions, " && ");
    _builder.append(_join, "\t");
    _builder.append("){");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("return row");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("})");
    _builder.newLine();
    String filteredDataScript = _builder.toString();
    return filteredDataScript;
  }
  
  public String generateGraphJsScript(final Chart chart) {
    String xAxis = chart.getXVariable().get(0).getMakeRefTo().getName();
    EList<ColumnRef> yAxises = chart.getYVariable();
    String type = chart.getType().getName().toLowerCase();
    int _size = chart.getFilter().size();
    final boolean hasFilter = (_size > 0);
    String _upperCase = type.substring(0, 1).toUpperCase();
    String _substring = type.substring(1);
    final String camelType = (_upperCase + _substring);
    String _xifexpression = null;
    if (hasFilter) {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("filteredData");
      _builder.append(camelType);
      _xifexpression = _builder.toString();
    } else {
      _xifexpression = "data";
    }
    final String dataVariableName = _xifexpression;
    StringConcatenation _builder_1 = new StringConcatenation();
    _builder_1.append("new Chart(");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("document.getElementById(\'myChart");
    _builder_1.append(camelType, "    ");
    _builder_1.append("\'),");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("    ");
    _builder_1.append("{");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("type: \'");
    _builder_1.append(type, "      ");
    _builder_1.append("\',");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("      ");
    _builder_1.append("data: {");
    _builder_1.newLine();
    _builder_1.append("        ");
    _builder_1.append("labels: ");
    _builder_1.append(dataVariableName, "        ");
    _builder_1.append(".map(row => row.");
    _builder_1.append(xAxis, "        ");
    _builder_1.append("),");
    _builder_1.newLineIfNotEmpty();
    _builder_1.append("        ");
    _builder_1.append("datasets: [");
    _builder_1.newLine();
    {
      for(final ColumnRef yColRef : yAxises) {
        _builder_1.append("        ");
        _builder_1.append("{");
        _builder_1.newLine();
        _builder_1.append("        ");
        _builder_1.append("   ");
        _builder_1.append("label: \"");
        String _name = yColRef.getMakeRefTo().getName();
        _builder_1.append(_name, "           ");
        _builder_1.append("\",");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("        ");
        _builder_1.append("   ");
        _builder_1.append("data: ");
        _builder_1.append(dataVariableName, "           ");
        _builder_1.append(".map(row => row.");
        String _name_1 = yColRef.getMakeRefTo().getName();
        _builder_1.append(_name_1, "           ");
        _builder_1.append("),");
        _builder_1.newLineIfNotEmpty();
        _builder_1.append("        ");
        _builder_1.append("}, ");
        _builder_1.newLine();
      }
    }
    _builder_1.append("        ");
    _builder_1.append("]");
    _builder_1.newLine();
    _builder_1.append("      ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("    ");
    _builder_1.append("}");
    _builder_1.newLine();
    _builder_1.append("  ");
    _builder_1.append(");");
    _builder_1.newLine();
    String script = _builder_1.toString();
    return script;
  }
  
  public String createJsonData(final ArrayList<ArrayList<String>> data, final EList<Column> columns, final String delimiter, final String commonDefaultMissingValue) {
    StringBuilder jsonData = new StringBuilder("const data = [\n");
    final ArrayList<String> columnTypes = data.get(0);
    final List<String> stringColumnTypesNames = new ArrayList<String>();
    stringColumnTypesNames.add("STRING");
    stringColumnTypesNames.add("String");
    stringColumnTypesNames.add("string");
    stringColumnTypesNames.add("CAT");
    stringColumnTypesNames.add("Category");
    for (int i = 1; (i < data.size()); i++) {
      {
        StringBuilder row = new StringBuilder("{");
        int countUnkownValues = 0;
        for (int j = 0; (j < columns.size()); j++) {
          {
            final String colName = columns.get(j).getName();
            int index = columns.get(j).getIndex();
            boolean _equals = data.get(i).get(index).equals(commonDefaultMissingValue);
            if (_equals) {
              int _countUnkownValues = countUnkownValues;
              countUnkownValues = (_countUnkownValues + 1);
            }
            boolean _contains = stringColumnTypesNames.contains(columnTypes.get(index));
            if (_contains) {
              StringBuilder _append = row.append(colName).append(": ");
              String _get = data.get(i).get(index);
              String _plus = ("\"" + _get);
              String _plus_1 = (_plus + "\"");
              _append.append(_plus_1);
            } else {
              row.append(colName).append(": ").append(data.get(i).get(index));
            }
            int _size = columns.size();
            int _minus = (_size - 1);
            boolean _notEquals = (j != _minus);
            if (_notEquals) {
              row.append(",");
            }
          }
        }
        row.append("}");
        if ((countUnkownValues == 0)) {
          jsonData.append(row);
          int _size = data.size();
          int _minus = (_size - 1);
          boolean _notEquals = (i != _minus);
          if (_notEquals) {
            jsonData.append(",");
            jsonData.append("\n");
          }
        }
      }
    }
    jsonData.append("\n");
    jsonData.append("]");
    return jsonData.toString();
  }
  
  public ArrayList<ArrayList<String>> readCSV(final String path, final String csvDelimiter, final String commonDefault) {
    ArrayList<ArrayList<String>> fileData = new ArrayList<ArrayList<String>>();
    File csvFile = new File(path);
    try (Scanner reader = new Function0<Scanner>() {
      @Override
      public Scanner apply() {
        try {
          return new Scanner(csvFile);
        } catch (Throwable _e) {
          throw Exceptions.sneakyThrow(_e);
        }
      }
    }.apply()) {
      String[] columnData = reader.nextLine().split((("\\s*\\" + csvDelimiter) + "\\s*"));
      final int csvValuesPerLineCount = columnData.length;
      ArrayList<String> rowData = null;
      while (reader.hasNextLine()) {
        {
          ArrayList<String> _arrayList = new ArrayList<String>();
          rowData = _arrayList;
          String aLine = reader.nextLine().trim();
          boolean _isEmpty = aLine.isEmpty();
          boolean _not = (!_isEmpty);
          if (_not) {
            String[] aLineParts = aLine.split((("\\s*\\" + csvDelimiter) + "\\s*"), csvValuesPerLineCount);
            for (int i = 0; (i < aLineParts.length); i++) {
              String _xifexpression = null;
              if (((aLineParts[i]).isEmpty() || (aLineParts[i]).equalsIgnoreCase("null"))) {
                _xifexpression = commonDefault;
              } else {
                _xifexpression = aLineParts[i];
              }
              rowData.add(_xifexpression);
            }
          }
          fileData.add(rowData);
        }
      }
    } catch (final Throwable _t) {
      if (_t instanceof FileNotFoundException) {
        System.err.println("The csv file to read can not be found");
      } else if (_t instanceof IndexOutOfBoundsException) {
        final IndexOutOfBoundsException e = (IndexOutOfBoundsException)_t;
        String _message = e.getMessage();
        String _plus = ("Index out of bound" + _message);
        System.err.println(_plus);
      } else {
        throw Exceptions.sneakyThrow(_t);
      }
    }
    return fileData;
  }
}
