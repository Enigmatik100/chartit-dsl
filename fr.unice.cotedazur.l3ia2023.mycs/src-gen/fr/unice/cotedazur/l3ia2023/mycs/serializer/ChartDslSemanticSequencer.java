/*
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia2023.mycs.serializer;

import chartitproject.Chart;
import chartitproject.ChartitprojectPackage;
import chartitproject.Column;
import chartitproject.ColumnRef;
import chartitproject.Condition;
import chartitproject.DataFile;
import chartitproject.DoubleVariable;
import chartitproject.IntVariable;
import chartitproject.Program;
import chartitproject.StringVariable;
import com.google.inject.Inject;
import fr.unice.cotedazur.l3ia2023.mycs.services.ChartDslGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ChartDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ChartDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ChartitprojectPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ChartitprojectPackage.CHART:
				sequence_Chart(context, (Chart) semanticObject); 
				return; 
			case ChartitprojectPackage.COLUMN:
				sequence_Column(context, (Column) semanticObject); 
				return; 
			case ChartitprojectPackage.COLUMN_REF:
				sequence_ColumnRef(context, (ColumnRef) semanticObject); 
				return; 
			case ChartitprojectPackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case ChartitprojectPackage.DATA_FILE:
				sequence_DataFile(context, (DataFile) semanticObject); 
				return; 
			case ChartitprojectPackage.DOUBLE_VARIABLE:
				sequence_DoubleVariable(context, (DoubleVariable) semanticObject); 
				return; 
			case ChartitprojectPackage.INT_VARIABLE:
				sequence_IntVariable(context, (IntVariable) semanticObject); 
				return; 
			case ChartitprojectPackage.PROGRAM:
				sequence_Program(context, (Program) semanticObject); 
				return; 
			case ChartitprojectPackage.STRING_VARIABLE:
				sequence_StringVariable(context, (StringVariable) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Chart returns Chart
	 *
	 * Constraint:
	 *     (
	 *         title=EString? 
	 *         type=ChartType? 
	 *         (xVariable+=ColumnRef xVariable+=ColumnRef*)? 
	 *         (yVariable+=ColumnRef yVariable+=ColumnRef*)? 
	 *         (Filter+=Condition Filter+=Condition*)?
	 *     )
	 */
	protected void sequence_Chart(ISerializationContext context, Chart semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ColumnRef returns ColumnRef
	 *
	 * Constraint:
	 *     makeRefTo=[Column|EString]
	 */
	protected void sequence_ColumnRef(ISerializationContext context, ColumnRef semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ChartitprojectPackage.Literals.COLUMN_REF__MAKE_REF_TO) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ChartitprojectPackage.Literals.COLUMN_REF__MAKE_REF_TO));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getColumnRefAccess().getMakeRefToColumnEStringParserRuleCall_0_1(), semanticObject.eGet(ChartitprojectPackage.Literals.COLUMN_REF__MAKE_REF_TO, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Column returns Column
	 *
	 * Constraint:
	 *     (index=EInt? name=EString)
	 */
	protected void sequence_Column(ISerializationContext context, Column semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (leftElement=ColumnRef operator=CompOperator? rightElement=Constant)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DataFile returns DataFile
	 *
	 * Constraint:
	 *     (
	 *         filePath=EString? 
	 *         hasHeader=EBoolean? 
	 *         hasType=EBoolean? 
	 *         separator=EString? 
	 *         UsedColumn+=Column 
	 *         UsedColumn+=Column*
	 *     )
	 */
	protected void sequence_DataFile(ISerializationContext context, DataFile semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns DoubleVariable
	 *     DoubleVariable returns DoubleVariable
	 *
	 * Constraint:
	 *     initialValue=EDouble?
	 */
	protected void sequence_DoubleVariable(ISerializationContext context, DoubleVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns IntVariable
	 *     IntVariable returns IntVariable
	 *
	 * Constraint:
	 *     initialValue=EInt?
	 */
	protected void sequence_IntVariable(ISerializationContext context, IntVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Program returns Program
	 *
	 * Constraint:
	 *     (name=EString CsvFile=DataFile chart+=Chart chart+=Chart*)
	 */
	protected void sequence_Program(ISerializationContext context, Program semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Constant returns StringVariable
	 *     StringVariable returns StringVariable
	 *
	 * Constraint:
	 *     initialValue=EString?
	 */
	protected void sequence_StringVariable(ISerializationContext context, StringVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
