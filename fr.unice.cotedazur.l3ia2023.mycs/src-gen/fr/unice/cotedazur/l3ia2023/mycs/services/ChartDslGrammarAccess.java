/*
 * generated by Xtext 2.25.0
 */
package fr.unice.cotedazur.l3ia2023.mycs.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ChartDslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProgramKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cBeginKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCsvFileAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCsvFileDataFileParserRuleCall_3_0 = (RuleCall)cCsvFileAssignment_3.eContents().get(0);
		private final Assignment cChartAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cChartChartParserRuleCall_4_0 = (RuleCall)cChartAssignment_4.eContents().get(0);
		private final Assignment cChartAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cChartChartParserRuleCall_5_0 = (RuleCall)cChartAssignment_5.eContents().get(0);
		private final Keyword cEndKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Program returns Program:
		//    'Program'
		//    name=EString
		//    'Begin'
		//        CsvFile=DataFile
		//        chart+=Chart ( chart+=Chart)*
		//    'End'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//'Program'
		//name=EString
		//'Begin'
		//    CsvFile=DataFile
		//    chart+=Chart ( chart+=Chart)*
		//'End'
		public Group getGroup() { return cGroup; }
		
		//'Program'
		public Keyword getProgramKeyword_0() { return cProgramKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'Begin'
		public Keyword getBeginKeyword_2() { return cBeginKeyword_2; }
		
		//CsvFile=DataFile
		public Assignment getCsvFileAssignment_3() { return cCsvFileAssignment_3; }
		
		//DataFile
		public RuleCall getCsvFileDataFileParserRuleCall_3_0() { return cCsvFileDataFileParserRuleCall_3_0; }
		
		//chart+=Chart
		public Assignment getChartAssignment_4() { return cChartAssignment_4; }
		
		//Chart
		public RuleCall getChartChartParserRuleCall_4_0() { return cChartChartParserRuleCall_4_0; }
		
		//( chart+=Chart)*
		public Assignment getChartAssignment_5() { return cChartAssignment_5; }
		
		//Chart
		public RuleCall getChartChartParserRuleCall_5_0() { return cChartChartParserRuleCall_5_0; }
		
		//'End'
		public Keyword getEndKeyword_6() { return cEndKeyword_6; }
	}
	public class ConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Constant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDoubleVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Constant returns Constant:
		//    IntVariable | StringVariable | DoubleVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//IntVariable | StringVariable | DoubleVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntVariable
		public RuleCall getIntVariableParserRuleCall_0() { return cIntVariableParserRuleCall_0; }
		
		//StringVariable
		public RuleCall getStringVariableParserRuleCall_1() { return cStringVariableParserRuleCall_1; }
		
		//DoubleVariable
		public RuleCall getDoubleVariableParserRuleCall_2() { return cDoubleVariableParserRuleCall_2; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class ChartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Chart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cChartAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cChartKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTitleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTitleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTitleEStringParserRuleCall_3_1_0 = (RuleCall)cTitleAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cTypeChartTypeEnumRuleCall_4_1_0 = (RuleCall)cTypeAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cXAxisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cXVariableAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cXVariableColumnRefParserRuleCall_5_2_0 = (RuleCall)cXVariableAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cXVariableAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cXVariableColumnRefParserRuleCall_5_3_1_0 = (RuleCall)cXVariableAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cYAxisKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cYVariableAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cYVariableColumnRefParserRuleCall_6_2_0 = (RuleCall)cYVariableAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cYVariableAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cYVariableColumnRefParserRuleCall_6_3_1_0 = (RuleCall)cYVariableAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cFilterKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cFilterAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cFilterConditionParserRuleCall_7_2_0 = (RuleCall)cFilterAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cAndKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cFilterAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cFilterConditionParserRuleCall_7_3_1_0 = (RuleCall)cFilterAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Chart returns Chart:
		//    {Chart}
		//    'Chart'
		//    '{'
		//        ('title' title=EString)?
		//        ('type' type=ChartType)?
		//        ('xAxis' '(' xVariable+=ColumnRef ( "," xVariable+=ColumnRef)* ')' )?
		//        ('yAxis' '(' yVariable+=ColumnRef ( "," yVariable+=ColumnRef)* ')' )?
		//        ('Filter' '[' Filter+=Condition ( "and" Filter+=Condition)* ']' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Chart}
		//'Chart'
		//'{'
		//    ('title' title=EString)?
		//    ('type' type=ChartType)?
		//    ('xAxis' '(' xVariable+=ColumnRef ( "," xVariable+=ColumnRef)* ')' )?
		//    ('yAxis' '(' yVariable+=ColumnRef ( "," yVariable+=ColumnRef)* ')' )?
		//    ('Filter' '[' Filter+=Condition ( "and" Filter+=Condition)* ']' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Chart}
		public Action getChartAction_0() { return cChartAction_0; }
		
		//'Chart'
		public Keyword getChartKeyword_1() { return cChartKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('title' title=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'title'
		public Keyword getTitleKeyword_3_0() { return cTitleKeyword_3_0; }
		
		//title=EString
		public Assignment getTitleAssignment_3_1() { return cTitleAssignment_3_1; }
		
		//EString
		public RuleCall getTitleEStringParserRuleCall_3_1_0() { return cTitleEStringParserRuleCall_3_1_0; }
		
		//('type' type=ChartType)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'type'
		public Keyword getTypeKeyword_4_0() { return cTypeKeyword_4_0; }
		
		//type=ChartType
		public Assignment getTypeAssignment_4_1() { return cTypeAssignment_4_1; }
		
		//ChartType
		public RuleCall getTypeChartTypeEnumRuleCall_4_1_0() { return cTypeChartTypeEnumRuleCall_4_1_0; }
		
		//('xAxis' '(' xVariable+=ColumnRef ( "," xVariable+=ColumnRef)* ')' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'xAxis'
		public Keyword getXAxisKeyword_5_0() { return cXAxisKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//xVariable+=ColumnRef
		public Assignment getXVariableAssignment_5_2() { return cXVariableAssignment_5_2; }
		
		//ColumnRef
		public RuleCall getXVariableColumnRefParserRuleCall_5_2_0() { return cXVariableColumnRefParserRuleCall_5_2_0; }
		
		//( "," xVariable+=ColumnRef)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//xVariable+=ColumnRef
		public Assignment getXVariableAssignment_5_3_1() { return cXVariableAssignment_5_3_1; }
		
		//ColumnRef
		public RuleCall getXVariableColumnRefParserRuleCall_5_3_1_0() { return cXVariableColumnRefParserRuleCall_5_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_4() { return cRightParenthesisKeyword_5_4; }
		
		//('yAxis' '(' yVariable+=ColumnRef ( "," yVariable+=ColumnRef)* ')' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'yAxis'
		public Keyword getYAxisKeyword_6_0() { return cYAxisKeyword_6_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_6_1() { return cLeftParenthesisKeyword_6_1; }
		
		//yVariable+=ColumnRef
		public Assignment getYVariableAssignment_6_2() { return cYVariableAssignment_6_2; }
		
		//ColumnRef
		public RuleCall getYVariableColumnRefParserRuleCall_6_2_0() { return cYVariableColumnRefParserRuleCall_6_2_0; }
		
		//( "," yVariable+=ColumnRef)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//yVariable+=ColumnRef
		public Assignment getYVariableAssignment_6_3_1() { return cYVariableAssignment_6_3_1; }
		
		//ColumnRef
		public RuleCall getYVariableColumnRefParserRuleCall_6_3_1_0() { return cYVariableColumnRefParserRuleCall_6_3_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6_4() { return cRightParenthesisKeyword_6_4; }
		
		//('Filter' '[' Filter+=Condition ( "and" Filter+=Condition)* ']' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'Filter'
		public Keyword getFilterKeyword_7_0() { return cFilterKeyword_7_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_7_1() { return cLeftSquareBracketKeyword_7_1; }
		
		//Filter+=Condition
		public Assignment getFilterAssignment_7_2() { return cFilterAssignment_7_2; }
		
		//Condition
		public RuleCall getFilterConditionParserRuleCall_7_2_0() { return cFilterConditionParserRuleCall_7_2_0; }
		
		//( "and" Filter+=Condition)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//"and"
		public Keyword getAndKeyword_7_3_0() { return cAndKeyword_7_3_0; }
		
		//Filter+=Condition
		public Assignment getFilterAssignment_7_3_1() { return cFilterAssignment_7_3_1; }
		
		//Condition
		public RuleCall getFilterConditionParserRuleCall_7_3_1_0() { return cFilterConditionParserRuleCall_7_3_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_7_4() { return cRightSquareBracketKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class DataFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.DataFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Keyword cLoadKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cDataKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Keyword cFromKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cFilePathAssignment_0_3 = (Assignment)cGroup_0.eContents().get(3);
		private final RuleCall cFilePathEStringParserRuleCall_0_3_0 = (RuleCall)cFilePathAssignment_0_3.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cHeaderKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cHasHeaderAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHasHeaderEBooleanParserRuleCall_1_1_0 = (RuleCall)cHasHeaderAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cTypesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cHasTypeAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cHasTypeEBooleanParserRuleCall_2_1_0 = (RuleCall)cHasTypeAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cDelimiterKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSeparatorAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSeparatorEStringParserRuleCall_3_1_0 = (RuleCall)cSeparatorAssignment_3_1.eContents().get(0);
		private final Keyword cSelectKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cColumnsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cUsedColumnAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cUsedColumnColumnParserRuleCall_7_0 = (RuleCall)cUsedColumnAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cUsedColumnAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cUsedColumnColumnParserRuleCall_8_1_0 = (RuleCall)cUsedColumnAssignment_8_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//DataFile returns DataFile:
		//        ('Load' 'data' 'from' filePath=EString)?
		//        ('header' hasHeader=EBoolean)?
		//        ('types' hasType=EBoolean)?
		//        ('delimiter' separator=EString)?
		//        'Select' 'Columns' '[' UsedColumn+=Column ( "," UsedColumn+=Column)* ']'
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//('Load' 'data' 'from' filePath=EString)?
		//('header' hasHeader=EBoolean)?
		//('types' hasType=EBoolean)?
		//('delimiter' separator=EString)?
		//'Select' 'Columns' '[' UsedColumn+=Column ( "," UsedColumn+=Column)* ']'
		public Group getGroup() { return cGroup; }
		
		//('Load' 'data' 'from' filePath=EString)?
		public Group getGroup_0() { return cGroup_0; }
		
		//'Load'
		public Keyword getLoadKeyword_0_0() { return cLoadKeyword_0_0; }
		
		//'data'
		public Keyword getDataKeyword_0_1() { return cDataKeyword_0_1; }
		
		//'from'
		public Keyword getFromKeyword_0_2() { return cFromKeyword_0_2; }
		
		//filePath=EString
		public Assignment getFilePathAssignment_0_3() { return cFilePathAssignment_0_3; }
		
		//EString
		public RuleCall getFilePathEStringParserRuleCall_0_3_0() { return cFilePathEStringParserRuleCall_0_3_0; }
		
		//('header' hasHeader=EBoolean)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'header'
		public Keyword getHeaderKeyword_1_0() { return cHeaderKeyword_1_0; }
		
		//hasHeader=EBoolean
		public Assignment getHasHeaderAssignment_1_1() { return cHasHeaderAssignment_1_1; }
		
		//EBoolean
		public RuleCall getHasHeaderEBooleanParserRuleCall_1_1_0() { return cHasHeaderEBooleanParserRuleCall_1_1_0; }
		
		//('types' hasType=EBoolean)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'types'
		public Keyword getTypesKeyword_2_0() { return cTypesKeyword_2_0; }
		
		//hasType=EBoolean
		public Assignment getHasTypeAssignment_2_1() { return cHasTypeAssignment_2_1; }
		
		//EBoolean
		public RuleCall getHasTypeEBooleanParserRuleCall_2_1_0() { return cHasTypeEBooleanParserRuleCall_2_1_0; }
		
		//('delimiter' separator=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'delimiter'
		public Keyword getDelimiterKeyword_3_0() { return cDelimiterKeyword_3_0; }
		
		//separator=EString
		public Assignment getSeparatorAssignment_3_1() { return cSeparatorAssignment_3_1; }
		
		//EString
		public RuleCall getSeparatorEStringParserRuleCall_3_1_0() { return cSeparatorEStringParserRuleCall_3_1_0; }
		
		//'Select'
		public Keyword getSelectKeyword_4() { return cSelectKeyword_4; }
		
		//'Columns'
		public Keyword getColumnsKeyword_5() { return cColumnsKeyword_5; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6() { return cLeftSquareBracketKeyword_6; }
		
		//UsedColumn+=Column
		public Assignment getUsedColumnAssignment_7() { return cUsedColumnAssignment_7; }
		
		//Column
		public RuleCall getUsedColumnColumnParserRuleCall_7_0() { return cUsedColumnColumnParserRuleCall_7_0; }
		
		//( "," UsedColumn+=Column)*
		public Group getGroup_8() { return cGroup_8; }
		
		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }
		
		//UsedColumn+=Column
		public Assignment getUsedColumnAssignment_8_1() { return cUsedColumnAssignment_8_1; }
		
		//Column
		public RuleCall getUsedColumnColumnParserRuleCall_8_1_0() { return cUsedColumnColumnParserRuleCall_8_1_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_9() { return cRightSquareBracketKeyword_9; }
	}
	public class ColumnRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ColumnRef");
		private final Assignment cMakeRefToAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cMakeRefToColumnCrossReference_0 = (CrossReference)cMakeRefToAssignment.eContents().get(0);
		private final RuleCall cMakeRefToColumnEStringParserRuleCall_0_1 = (RuleCall)cMakeRefToColumnCrossReference_0.eContents().get(1);
		
		//ColumnRef returns ColumnRef:
		//         makeRefTo=[Column|EString]
		//    ;
		@Override public ParserRule getRule() { return rule; }
		
		//makeRefTo=[Column|EString]
		public Assignment getMakeRefToAssignment() { return cMakeRefToAssignment; }
		
		//[Column|EString]
		public CrossReference getMakeRefToColumnCrossReference_0() { return cMakeRefToColumnCrossReference_0; }
		
		//EString
		public RuleCall getMakeRefToColumnEStringParserRuleCall_0_1() { return cMakeRefToColumnEStringParserRuleCall_0_1; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cLeftElementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftElementColumnRefParserRuleCall_1_0 = (RuleCall)cLeftElementAssignment_1.eContents().get(0);
		private final Assignment cOperatorAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperatorCompOperatorEnumRuleCall_2_0 = (RuleCall)cOperatorAssignment_2.eContents().get(0);
		private final Assignment cRightElementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRightElementConstantParserRuleCall_3_0 = (RuleCall)cRightElementAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Condition returns Condition:
		//    '('
		//        leftElement=ColumnRef
		//        (operator=CompOperator)?
		//        rightElement=Constant
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'('
		//    leftElement=ColumnRef
		//    (operator=CompOperator)?
		//    rightElement=Constant
		//')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//leftElement=ColumnRef
		public Assignment getLeftElementAssignment_1() { return cLeftElementAssignment_1; }
		
		//ColumnRef
		public RuleCall getLeftElementColumnRefParserRuleCall_1_0() { return cLeftElementColumnRefParserRuleCall_1_0; }
		
		//(operator=CompOperator)?
		public Assignment getOperatorAssignment_2() { return cOperatorAssignment_2; }
		
		//CompOperator
		public RuleCall getOperatorCompOperatorEnumRuleCall_2_0() { return cOperatorCompOperatorEnumRuleCall_2_0; }
		
		//rightElement=Constant
		public Assignment getRightElementAssignment_3() { return cRightElementAssignment_3; }
		
		//Constant
		public RuleCall getRightElementConstantParserRuleCall_3_0() { return cRightElementConstantParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class ColumnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Column");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cColumnAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIndexKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIndexAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIndexEIntParserRuleCall_2_1_0 = (RuleCall)cIndexAssignment_2_1.eContents().get(0);
		private final Keyword cAsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameEStringParserRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Column returns Column:
		//    {Column}
		//    '('
		//        ('index:' index=EInt)? 'as' name=EString
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{Column}
		//'('
		//    ('index:' index=EInt)? 'as' name=EString
		//')'
		public Group getGroup() { return cGroup; }
		
		//{Column}
		public Action getColumnAction_0() { return cColumnAction_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//('index:' index=EInt)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'index:'
		public Keyword getIndexKeyword_2_0() { return cIndexKeyword_2_0; }
		
		//index=EInt
		public Assignment getIndexAssignment_2_1() { return cIndexAssignment_2_1; }
		
		//EInt
		public RuleCall getIndexEIntParserRuleCall_2_1_0() { return cIndexEIntParserRuleCall_2_1_0; }
		
		//'as'
		public Keyword getAsKeyword_3() { return cAsKeyword_3; }
		
		//name=EString
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_4_0() { return cNameEStringParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt returns ecore::EInt:
		//    '-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class IntVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.IntVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialValueEIntParserRuleCall_3_0 = (RuleCall)cInitialValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//IntVariable returns IntVariable:
		//    {IntVariable}
		//    'int'
		//    '('
		//        (initialValue=EInt)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{IntVariable}
		//'int'
		//'('
		//    (initialValue=EInt)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{IntVariable}
		public Action getIntVariableAction_0() { return cIntVariableAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(initialValue=EInt)?
		public Assignment getInitialValueAssignment_3() { return cInitialValueAssignment_3; }
		
		//EInt
		public RuleCall getInitialValueEIntParserRuleCall_3_0() { return cInitialValueEIntParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class StringVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.StringVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStrKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialValueEStringParserRuleCall_3_0 = (RuleCall)cInitialValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//StringVariable returns StringVariable:
		//    {StringVariable}
		//    'str'
		//    '('
		//        (initialValue=EString)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{StringVariable}
		//'str'
		//'('
		//    (initialValue=EString)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{StringVariable}
		public Action getStringVariableAction_0() { return cStringVariableAction_0; }
		
		//'str'
		public Keyword getStrKeyword_1() { return cStrKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//(initialValue=EString)?
		public Assignment getInitialValueAssignment_3() { return cInitialValueAssignment_3; }
		
		//EString
		public RuleCall getInitialValueEStringParserRuleCall_3_0() { return cInitialValueEStringParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class DoubleVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.DoubleVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDoubleVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDoubleKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cInitialValueEDoubleParserRuleCall_3_0 = (RuleCall)cInitialValueAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//DoubleVariable returns DoubleVariable:
		//    {DoubleVariable}
		//    'double'
		//    '('
		//        ( initialValue=EDouble)?
		//    ')';
		@Override public ParserRule getRule() { return rule; }
		
		//{DoubleVariable}
		//'double'
		//'('
		//    ( initialValue=EDouble)?
		//')'
		public Group getGroup() { return cGroup; }
		
		//{DoubleVariable}
		public Action getDoubleVariableAction_0() { return cDoubleVariableAction_0; }
		
		//'double'
		public Keyword getDoubleKeyword_1() { return cDoubleKeyword_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//( initialValue=EDouble)?
		public Assignment getInitialValueAssignment_3() { return cInitialValueAssignment_3; }
		
		//EDouble
		public RuleCall getInitialValueEDoubleParserRuleCall_3_0() { return cInitialValueEDoubleParserRuleCall_3_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}
	public class EDoubleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EDouble");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EDouble returns ecore::EDouble:
		//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT? '.' INT (('E'|'e') '-'? INT)?
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }
		
		//(('E'|'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }
		
		//('E'|'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }
		
		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }
		
		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean returns ecore::EBoolean:
		//    'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class ChartTypeElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ChartType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBARBARKeyword_0_0 = (Keyword)cBAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPIEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPIEPIEKeyword_1_0 = (Keyword)cPIEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cSCATTEREnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cSCATTERSCATTERKeyword_2_0 = (Keyword)cSCATTEREnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLINEEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLINELINEKeyword_3_0 = (Keyword)cLINEEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMIXEDEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMIXEDMIXEDKeyword_4_0 = (Keyword)cMIXEDEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cBUBBLEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cBUBBLEBUBBLEKeyword_5_0 = (Keyword)cBUBBLEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cRADAREnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cRADARRADARKeyword_6_0 = (Keyword)cRADAREnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cAREAEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cAREAAREAKeyword_7_0 = (Keyword)cAREAEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cDONUTEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cDONUTDONUTKeyword_8_0 = (Keyword)cDONUTEnumLiteralDeclaration_8.eContents().get(0);
		
		//enum ChartType returns ChartType:
		//                BAR = 'BAR' | PIE = 'PIE' | SCATTER = 'SCATTER' | LINE = 'LINE' | MIXED = 'MIXED' | BUBBLE = 'BUBBLE' | RADAR = 'RADAR' | AREA = 'AREA' | DONUT = 'DONUT';
		public EnumRule getRule() { return rule; }
		
		//BAR = 'BAR' | PIE = 'PIE' | SCATTER = 'SCATTER' | LINE = 'LINE' | MIXED = 'MIXED' | BUBBLE = 'BUBBLE' | RADAR = 'RADAR' | AREA = 'AREA' | DONUT = 'DONUT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BAR = 'BAR'
		public EnumLiteralDeclaration getBAREnumLiteralDeclaration_0() { return cBAREnumLiteralDeclaration_0; }
		
		//'BAR'
		public Keyword getBARBARKeyword_0_0() { return cBARBARKeyword_0_0; }
		
		//PIE = 'PIE'
		public EnumLiteralDeclaration getPIEEnumLiteralDeclaration_1() { return cPIEEnumLiteralDeclaration_1; }
		
		//'PIE'
		public Keyword getPIEPIEKeyword_1_0() { return cPIEPIEKeyword_1_0; }
		
		//SCATTER = 'SCATTER'
		public EnumLiteralDeclaration getSCATTEREnumLiteralDeclaration_2() { return cSCATTEREnumLiteralDeclaration_2; }
		
		//'SCATTER'
		public Keyword getSCATTERSCATTERKeyword_2_0() { return cSCATTERSCATTERKeyword_2_0; }
		
		//LINE = 'LINE'
		public EnumLiteralDeclaration getLINEEnumLiteralDeclaration_3() { return cLINEEnumLiteralDeclaration_3; }
		
		//'LINE'
		public Keyword getLINELINEKeyword_3_0() { return cLINELINEKeyword_3_0; }
		
		//MIXED = 'MIXED'
		public EnumLiteralDeclaration getMIXEDEnumLiteralDeclaration_4() { return cMIXEDEnumLiteralDeclaration_4; }
		
		//'MIXED'
		public Keyword getMIXEDMIXEDKeyword_4_0() { return cMIXEDMIXEDKeyword_4_0; }
		
		//BUBBLE = 'BUBBLE'
		public EnumLiteralDeclaration getBUBBLEEnumLiteralDeclaration_5() { return cBUBBLEEnumLiteralDeclaration_5; }
		
		//'BUBBLE'
		public Keyword getBUBBLEBUBBLEKeyword_5_0() { return cBUBBLEBUBBLEKeyword_5_0; }
		
		//RADAR = 'RADAR'
		public EnumLiteralDeclaration getRADAREnumLiteralDeclaration_6() { return cRADAREnumLiteralDeclaration_6; }
		
		//'RADAR'
		public Keyword getRADARRADARKeyword_6_0() { return cRADARRADARKeyword_6_0; }
		
		//AREA = 'AREA'
		public EnumLiteralDeclaration getAREAEnumLiteralDeclaration_7() { return cAREAEnumLiteralDeclaration_7; }
		
		//'AREA'
		public Keyword getAREAAREAKeyword_7_0() { return cAREAAREAKeyword_7_0; }
		
		//DONUT = 'DONUT'
		public EnumLiteralDeclaration getDONUTEnumLiteralDeclaration_8() { return cDONUTEnumLiteralDeclaration_8; }
		
		//'DONUT'
		public Keyword getDONUTDONUTKeyword_8_0() { return cDONUTDONUTKeyword_8_0; }
	}
	public class CompOperatorElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.CompOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEQUALEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEQUALEqualsSignEqualsSignKeyword_0_0 = (Keyword)cEQUALEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGREATERGreaterThanSignKeyword_1_0 = (Keyword)cGREATEREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLESSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLESSLessThanSignKeyword_2_0 = (Keyword)cLESSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cNOT_EQUALEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cNOT_EQUALExclamationMarkEqualsSignKeyword_3_0 = (Keyword)cNOT_EQUALEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_OR_EQUALEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0 = (Keyword)cGREATER_OR_EQUALEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cLESS_OR_EQUALEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cLESS_OR_EQUALLessThanSignEqualsSignKeyword_5_0 = (Keyword)cLESS_OR_EQUALEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum CompOperator returns CompOperator:
		//                EQUAL = '==' | GREATER = '>' | LESS = '<' | NOT_EQUAL = '!=' | GREATER_OR_EQUAL = '>=' | LESS_OR_EQUAL = '<=';
		public EnumRule getRule() { return rule; }
		
		//EQUAL = '==' | GREATER = '>' | LESS = '<' | NOT_EQUAL = '!=' | GREATER_OR_EQUAL = '>=' | LESS_OR_EQUAL = '<='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//EQUAL = '=='
		public EnumLiteralDeclaration getEQUALEnumLiteralDeclaration_0() { return cEQUALEnumLiteralDeclaration_0; }
		
		//'=='
		public Keyword getEQUALEqualsSignEqualsSignKeyword_0_0() { return cEQUALEqualsSignEqualsSignKeyword_0_0; }
		
		//GREATER = '>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_1() { return cGREATEREnumLiteralDeclaration_1; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_1_0() { return cGREATERGreaterThanSignKeyword_1_0; }
		
		//LESS = '<'
		public EnumLiteralDeclaration getLESSEnumLiteralDeclaration_2() { return cLESSEnumLiteralDeclaration_2; }
		
		//'<'
		public Keyword getLESSLessThanSignKeyword_2_0() { return cLESSLessThanSignKeyword_2_0; }
		
		//NOT_EQUAL = '!='
		public EnumLiteralDeclaration getNOT_EQUALEnumLiteralDeclaration_3() { return cNOT_EQUALEnumLiteralDeclaration_3; }
		
		//'!='
		public Keyword getNOT_EQUALExclamationMarkEqualsSignKeyword_3_0() { return cNOT_EQUALExclamationMarkEqualsSignKeyword_3_0; }
		
		//GREATER_OR_EQUAL = '>='
		public EnumLiteralDeclaration getGREATER_OR_EQUALEnumLiteralDeclaration_4() { return cGREATER_OR_EQUALEnumLiteralDeclaration_4; }
		
		//'>='
		public Keyword getGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0() { return cGREATER_OR_EQUALGreaterThanSignEqualsSignKeyword_4_0; }
		
		//LESS_OR_EQUAL = '<='
		public EnumLiteralDeclaration getLESS_OR_EQUALEnumLiteralDeclaration_5() { return cLESS_OR_EQUALEnumLiteralDeclaration_5; }
		
		//'<='
		public Keyword getLESS_OR_EQUALLessThanSignEqualsSignKeyword_5_0() { return cLESS_OR_EQUALLessThanSignEqualsSignKeyword_5_0; }
	}
	
	private final ProgramElements pProgram;
	private final ConstantElements pConstant;
	private final EStringElements pEString;
	private final ChartElements pChart;
	private final DataFileElements pDataFile;
	private final ChartTypeElements eChartType;
	private final ColumnRefElements pColumnRef;
	private final ConditionElements pCondition;
	private final ColumnElements pColumn;
	private final EIntElements pEInt;
	private final CompOperatorElements eCompOperator;
	private final IntVariableElements pIntVariable;
	private final StringVariableElements pStringVariable;
	private final DoubleVariableElements pDoubleVariable;
	private final EDoubleElements pEDouble;
	private final EBooleanElements pEBoolean;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ChartDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProgram = new ProgramElements();
		this.pConstant = new ConstantElements();
		this.pEString = new EStringElements();
		this.pChart = new ChartElements();
		this.pDataFile = new DataFileElements();
		this.eChartType = new ChartTypeElements();
		this.pColumnRef = new ColumnRefElements();
		this.pCondition = new ConditionElements();
		this.pColumn = new ColumnElements();
		this.pEInt = new EIntElements();
		this.eCompOperator = new CompOperatorElements();
		this.pIntVariable = new IntVariableElements();
		this.pStringVariable = new StringVariableElements();
		this.pDoubleVariable = new DoubleVariableElements();
		this.pEDouble = new EDoubleElements();
		this.pEBoolean = new EBooleanElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fr.unice.cotedazur.l3ia2023.mycs.ChartDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns Program:
	//    'Program'
	//    name=EString
	//    'Begin'
	//        CsvFile=DataFile
	//        chart+=Chart ( chart+=Chart)*
	//    'End'
	//    ;
	public ProgramElements getProgramAccess() {
		return pProgram;
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}
	
	//Constant returns Constant:
	//    IntVariable | StringVariable | DoubleVariable;
	public ConstantElements getConstantAccess() {
		return pConstant;
	}
	
	public ParserRule getConstantRule() {
		return getConstantAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Chart returns Chart:
	//    {Chart}
	//    'Chart'
	//    '{'
	//        ('title' title=EString)?
	//        ('type' type=ChartType)?
	//        ('xAxis' '(' xVariable+=ColumnRef ( "," xVariable+=ColumnRef)* ')' )?
	//        ('yAxis' '(' yVariable+=ColumnRef ( "," yVariable+=ColumnRef)* ')' )?
	//        ('Filter' '[' Filter+=Condition ( "and" Filter+=Condition)* ']' )?
	//    '}';
	public ChartElements getChartAccess() {
		return pChart;
	}
	
	public ParserRule getChartRule() {
		return getChartAccess().getRule();
	}
	
	//DataFile returns DataFile:
	//        ('Load' 'data' 'from' filePath=EString)?
	//        ('header' hasHeader=EBoolean)?
	//        ('types' hasType=EBoolean)?
	//        ('delimiter' separator=EString)?
	//        'Select' 'Columns' '[' UsedColumn+=Column ( "," UsedColumn+=Column)* ']'
	//    ;
	public DataFileElements getDataFileAccess() {
		return pDataFile;
	}
	
	public ParserRule getDataFileRule() {
		return getDataFileAccess().getRule();
	}
	
	//enum ChartType returns ChartType:
	//                BAR = 'BAR' | PIE = 'PIE' | SCATTER = 'SCATTER' | LINE = 'LINE' | MIXED = 'MIXED' | BUBBLE = 'BUBBLE' | RADAR = 'RADAR' | AREA = 'AREA' | DONUT = 'DONUT';
	public ChartTypeElements getChartTypeAccess() {
		return eChartType;
	}
	
	public EnumRule getChartTypeRule() {
		return getChartTypeAccess().getRule();
	}
	
	//ColumnRef returns ColumnRef:
	//         makeRefTo=[Column|EString]
	//    ;
	public ColumnRefElements getColumnRefAccess() {
		return pColumnRef;
	}
	
	public ParserRule getColumnRefRule() {
		return getColumnRefAccess().getRule();
	}
	
	//Condition returns Condition:
	//    '('
	//        leftElement=ColumnRef
	//        (operator=CompOperator)?
	//        rightElement=Constant
	//    ')';
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Column returns Column:
	//    {Column}
	//    '('
	//        ('index:' index=EInt)? 'as' name=EString
	//    ')';
	public ColumnElements getColumnAccess() {
		return pColumn;
	}
	
	public ParserRule getColumnRule() {
		return getColumnAccess().getRule();
	}
	
	//EInt returns ecore::EInt:
	//    '-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum CompOperator returns CompOperator:
	//                EQUAL = '==' | GREATER = '>' | LESS = '<' | NOT_EQUAL = '!=' | GREATER_OR_EQUAL = '>=' | LESS_OR_EQUAL = '<=';
	public CompOperatorElements getCompOperatorAccess() {
		return eCompOperator;
	}
	
	public EnumRule getCompOperatorRule() {
		return getCompOperatorAccess().getRule();
	}
	
	//IntVariable returns IntVariable:
	//    {IntVariable}
	//    'int'
	//    '('
	//        (initialValue=EInt)?
	//    ')';
	public IntVariableElements getIntVariableAccess() {
		return pIntVariable;
	}
	
	public ParserRule getIntVariableRule() {
		return getIntVariableAccess().getRule();
	}
	
	//StringVariable returns StringVariable:
	//    {StringVariable}
	//    'str'
	//    '('
	//        (initialValue=EString)?
	//    ')';
	public StringVariableElements getStringVariableAccess() {
		return pStringVariable;
	}
	
	public ParserRule getStringVariableRule() {
		return getStringVariableAccess().getRule();
	}
	
	//DoubleVariable returns DoubleVariable:
	//    {DoubleVariable}
	//    'double'
	//    '('
	//        ( initialValue=EDouble)?
	//    ')';
	public DoubleVariableElements getDoubleVariableAccess() {
		return pDoubleVariable;
	}
	
	public ParserRule getDoubleVariableRule() {
		return getDoubleVariableAccess().getRule();
	}
	
	//EDouble returns ecore::EDouble:
	//    '-'? INT? '.' INT (('E'|'e') '-'? INT)?;
	public EDoubleElements getEDoubleAccess() {
		return pEDouble;
	}
	
	public ParserRule getEDoubleRule() {
		return getEDoubleAccess().getRule();
	}
	
	//EBoolean returns ecore::EBoolean:
	//    'true' | 'false';
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
