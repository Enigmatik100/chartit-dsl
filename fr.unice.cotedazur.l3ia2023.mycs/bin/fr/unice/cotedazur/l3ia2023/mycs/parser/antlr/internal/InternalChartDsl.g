/*
 * generated by Xtext 2.25.0
 */
grammar InternalChartDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fr.unice.cotedazur.l3ia2023.mycs.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fr.unice.cotedazur.l3ia2023.mycs.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fr.unice.cotedazur.l3ia2023.mycs.services.ChartDslGrammarAccess;

}

@parser::members {

 	private ChartDslGrammarAccess grammarAccess;

    public InternalChartDslParser(TokenStream input, ChartDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Program";
   	}

   	@Override
   	protected ChartDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleProgram
entryRuleProgram returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProgramRule()); }
	iv_ruleProgram=ruleProgram
	{ $current=$iv_ruleProgram.current; }
	EOF;

// Rule Program
ruleProgram returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getCsvFileDataFileParserRuleCall_0_0());
				}
				lv_CsvFile_0_0=ruleDataFile
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					set(
						$current,
						"CsvFile",
						lv_CsvFile_0_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.DataFile");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getChartChartParserRuleCall_1_0());
				}
				lv_chart_1_0=ruleChart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"chart",
						lv_chart_1_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Chart");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getProgramAccess().getChartChartParserRuleCall_2_0());
				}
				lv_chart_2_0=ruleChart
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getProgramRule());
					}
					add(
						$current,
						"chart",
						lv_chart_2_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Chart");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleConstant
entryRuleConstant returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConstantRule()); }
	iv_ruleConstant=ruleConstant
	{ $current=$iv_ruleConstant.current; }
	EOF;

// Rule Constant
ruleConstant returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getConstantAccess().getIntVariableParserRuleCall_0());
		}
		this_IntVariable_0=ruleIntVariable
		{
			$current = $this_IntVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getStringVariableParserRuleCall_1());
		}
		this_StringVariable_1=ruleStringVariable
		{
			$current = $this_StringVariable_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getConstantAccess().getDoubleVariableParserRuleCall_2());
		}
		this_DoubleVariable_2=ruleDoubleVariable
		{
			$current = $this_DoubleVariable_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleChart
entryRuleChart returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getChartRule()); }
	iv_ruleChart=ruleChart
	{ $current=$iv_ruleChart.current; }
	EOF;

// Rule Chart
ruleChart returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getChartAccess().getChartAction_0(),
					$current);
			}
		)
		otherlv_1='Chart'
		{
			newLeafNode(otherlv_1, grammarAccess.getChartAccess().getChartKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getChartAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='title:'
			{
				newLeafNode(otherlv_3, grammarAccess.getChartAccess().getTitleKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getTitleEStringParserRuleCall_3_1_0());
					}
					lv_title_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						set(
							$current,
							"title",
							lv_title_4_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='type:'
			{
				newLeafNode(otherlv_5, grammarAccess.getChartAccess().getTypeKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getTypeChartTypeEnumRuleCall_4_1_0());
					}
					lv_type_6_0=ruleChartType
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						set(
							$current,
							"type",
							lv_type_6_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ChartType");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='xAxis:'
			{
				newLeafNode(otherlv_7, grammarAccess.getChartAccess().getXAxisKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getXVariableColumnRefParserRuleCall_5_1_0());
					}
					lv_xVariable_8_0=ruleColumnRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						add(
							$current,
							"xVariable",
							lv_xVariable_8_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ColumnRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getXVariableColumnRefParserRuleCall_5_2_0());
					}
					lv_xVariable_9_0=ruleColumnRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						add(
							$current,
							"xVariable",
							lv_xVariable_9_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ColumnRef");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_10='yAxis:'
			{
				newLeafNode(otherlv_10, grammarAccess.getChartAccess().getYAxisKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getYVariableColumnRefParserRuleCall_6_1_0());
					}
					lv_yVariable_11_0=ruleColumnRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						add(
							$current,
							"yVariable",
							lv_yVariable_11_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ColumnRef");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getYVariableColumnRefParserRuleCall_6_2_0());
					}
					lv_yVariable_12_0=ruleColumnRef
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						add(
							$current,
							"yVariable",
							lv_yVariable_12_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ColumnRef");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		(
			otherlv_13='Filter:'
			{
				newLeafNode(otherlv_13, grammarAccess.getChartAccess().getFilterKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getFilterConditionParserRuleCall_7_1_0());
					}
					lv_Filter_14_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						add(
							$current,
							"Filter",
							lv_Filter_14_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getChartAccess().getFilterConditionParserRuleCall_7_2_0());
					}
					lv_Filter_15_0=ruleCondition
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getChartRule());
						}
						add(
							$current,
							"Filter",
							lv_Filter_15_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Condition");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_16='}'
		{
			newLeafNode(otherlv_16, grammarAccess.getChartAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleDataFile
entryRuleDataFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDataFileRule()); }
	iv_ruleDataFile=ruleDataFile
	{ $current=$iv_ruleDataFile.current; }
	EOF;

// Rule DataFile
ruleDataFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='Load'
			{
				newLeafNode(otherlv_0, grammarAccess.getDataFileAccess().getLoadKeyword_0_0());
			}
			otherlv_1='data'
			{
				newLeafNode(otherlv_1, grammarAccess.getDataFileAccess().getDataKeyword_0_1());
			}
			otherlv_2='from'
			{
				newLeafNode(otherlv_2, grammarAccess.getDataFileAccess().getFromKeyword_0_2());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFileAccess().getFilePathEStringParserRuleCall_0_3_0());
					}
					lv_filePath_3_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFileRule());
						}
						set(
							$current,
							"filePath",
							lv_filePath_3_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_4='header'
			{
				newLeafNode(otherlv_4, grammarAccess.getDataFileAccess().getHeaderKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFileAccess().getHasHeaderEBooleanParserRuleCall_1_1_0());
					}
					lv_hasHeader_5_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFileRule());
						}
						set(
							$current,
							"hasHeader",
							lv_hasHeader_5_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_6='types'
			{
				newLeafNode(otherlv_6, grammarAccess.getDataFileAccess().getTypesKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFileAccess().getHasTypeEBooleanParserRuleCall_2_1_0());
					}
					lv_hasType_7_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFileRule());
						}
						set(
							$current,
							"hasType",
							lv_hasType_7_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_8='delimiter'
			{
				newLeafNode(otherlv_8, grammarAccess.getDataFileAccess().getDelimiterKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFileAccess().getSeparatorEStringParserRuleCall_3_1_0());
					}
					lv_separator_9_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFileRule());
						}
						set(
							$current,
							"separator",
							lv_separator_9_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_10='Select'
		{
			newLeafNode(otherlv_10, grammarAccess.getDataFileAccess().getSelectKeyword_4());
		}
		otherlv_11='Columns'
		{
			newLeafNode(otherlv_11, grammarAccess.getDataFileAccess().getColumnsKeyword_5());
		}
		otherlv_12='['
		{
			newLeafNode(otherlv_12, grammarAccess.getDataFileAccess().getLeftSquareBracketKeyword_6());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDataFileAccess().getUsedColumnColumnParserRuleCall_7_0());
				}
				lv_UsedColumn_13_0=ruleColumn
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDataFileRule());
					}
					add(
						$current,
						"UsedColumn",
						lv_UsedColumn_13_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Column");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_14=','
			{
				newLeafNode(otherlv_14, grammarAccess.getDataFileAccess().getCommaKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getDataFileAccess().getUsedColumnColumnParserRuleCall_8_1_0());
					}
					lv_UsedColumn_15_0=ruleColumn
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDataFileRule());
						}
						add(
							$current,
							"UsedColumn",
							lv_UsedColumn_15_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Column");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		otherlv_16=']'
		{
			newLeafNode(otherlv_16, grammarAccess.getDataFileAccess().getRightSquareBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleColumnRef
entryRuleColumnRef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRefRule()); }
	iv_ruleColumnRef=ruleColumnRef
	{ $current=$iv_ruleColumnRef.current; }
	EOF;

// Rule ColumnRef
ruleColumnRef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getColumnRefRule());
				}
			}
			{
				newCompositeNode(grammarAccess.getColumnRefAccess().getMakeRefToColumnCrossReference_0());
			}
			ruleEString
			{
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	iv_ruleCondition=ruleCondition
	{ $current=$iv_ruleCondition.current; }
	EOF;

// Rule Condition
ruleCondition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getLeftElementColumnRefParserRuleCall_0_0());
				}
				lv_leftElement_0_0=ruleColumnRef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"leftElement",
						lv_leftElement_0_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.ColumnRef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getOperatorCompOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleCompOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.CompOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getConditionAccess().getRightElementConstantParserRuleCall_2_0());
				}
				lv_rightElement_2_0=ruleConstant
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getConditionRule());
					}
					set(
						$current,
						"rightElement",
						lv_rightElement_2_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.Constant");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleColumn
entryRuleColumn returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnRule()); }
	iv_ruleColumn=ruleColumn
	{ $current=$iv_ruleColumn.current; }
	EOF;

// Rule Column
ruleColumn returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getColumnAccess().getColumnAction_0(),
					$current);
			}
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getColumnAccess().getLeftParenthesisKeyword_1());
		}
		(
			otherlv_2='index'
			{
				newLeafNode(otherlv_2, grammarAccess.getColumnAccess().getIndexKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getColumnAccess().getIndexEIntParserRuleCall_2_1_0());
					}
					lv_index_3_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getColumnRule());
						}
						set(
							$current,
							"index",
							lv_index_3_0,
							"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='as'
		{
			newLeafNode(otherlv_4, grammarAccess.getColumnAccess().getAsKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnAccess().getNameEStringParserRuleCall_4_0());
				}
				lv_name_5_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnRule());
					}
					set(
						$current,
						"name",
						lv_name_5_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getColumnAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleIntVariable
entryRuleIntVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVariableRule()); }
	iv_ruleIntVariable=ruleIntVariable
	{ $current=$iv_ruleIntVariable.current; }
	EOF;

// Rule IntVariable
ruleIntVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntVariableAccess().getIntVariableAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntVariableAccess().getIntKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getIntVariableAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntVariableAccess().getInitialValueEIntParserRuleCall_3_0());
				}
				lv_initialValue_3_0=ruleEInt
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntVariableRule());
					}
					set(
						$current,
						"initialValue",
						lv_initialValue_3_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EInt");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getIntVariableAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleStringVariable
entryRuleStringVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringVariableRule()); }
	iv_ruleStringVariable=ruleStringVariable
	{ $current=$iv_ruleStringVariable.current; }
	EOF;

// Rule StringVariable
ruleStringVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStringVariableAccess().getStringVariableAction_0(),
					$current);
			}
		)
		otherlv_1='str'
		{
			newLeafNode(otherlv_1, grammarAccess.getStringVariableAccess().getStrKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getStringVariableAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStringVariableAccess().getInitialValueEStringParserRuleCall_3_0());
				}
				lv_initialValue_3_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStringVariableRule());
					}
					set(
						$current,
						"initialValue",
						lv_initialValue_3_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getStringVariableAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleDoubleVariable
entryRuleDoubleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDoubleVariableRule()); }
	iv_ruleDoubleVariable=ruleDoubleVariable
	{ $current=$iv_ruleDoubleVariable.current; }
	EOF;

// Rule DoubleVariable
ruleDoubleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDoubleVariableAccess().getDoubleVariableAction_0(),
					$current);
			}
		)
		otherlv_1='double'
		{
			newLeafNode(otherlv_1, grammarAccess.getDoubleVariableAccess().getDoubleKeyword_1());
		}
		otherlv_2='('
		{
			newLeafNode(otherlv_2, grammarAccess.getDoubleVariableAccess().getLeftParenthesisKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDoubleVariableAccess().getInitialValueEDoubleParserRuleCall_3_0());
				}
				lv_initialValue_3_0=ruleEDouble
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDoubleVariableRule());
					}
					set(
						$current,
						"initialValue",
						lv_initialValue_3_0,
						"fr.unice.cotedazur.l3ia2023.mycs.ChartDsl.EDouble");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getDoubleVariableAccess().getRightParenthesisKeyword_4());
		}
	)
;

// Entry rule entryRuleEDouble
entryRuleEDouble returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEDoubleRule()); }
	iv_ruleEDouble=ruleEDouble
	{ $current=$iv_ruleEDouble.current.getText(); }
	EOF;

// Rule EDouble
ruleEDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0());
			}
		)?
		(
			this_INT_1=RULE_INT
			{
				$current.merge(this_INT_1);
			}
			{
				newLeafNode(this_INT_1, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1());
			}
		)?
		kw='.'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEDoubleAccess().getFullStopKeyword_2());
		}
		this_INT_3=RULE_INT
		{
			$current.merge(this_INT_3);
		}
		{
			newLeafNode(this_INT_3, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3());
		}
		(
			(
				kw='E'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_0());
				}
				    |
				kw='e'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getEKeyword_4_0_1());
				}
			)
			(
				kw='-'
				{
					$current.merge(kw);
					newLeafNode(kw, grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_4_1());
				}
			)?
			this_INT_7=RULE_INT
			{
				$current.merge(this_INT_7);
			}
			{
				newLeafNode(this_INT_7, grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_4_2());
			}
		)?
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Rule ChartType
ruleChartType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='BAR'
			{
				$current = grammarAccess.getChartTypeAccess().getBAREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getChartTypeAccess().getBAREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='PIE'
			{
				$current = grammarAccess.getChartTypeAccess().getPIEEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getChartTypeAccess().getPIEEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='SCATTER'
			{
				$current = grammarAccess.getChartTypeAccess().getSCATTEREnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getChartTypeAccess().getSCATTEREnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='LINE'
			{
				$current = grammarAccess.getChartTypeAccess().getLINEEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getChartTypeAccess().getLINEEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='MIXED'
			{
				$current = grammarAccess.getChartTypeAccess().getMIXEDEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getChartTypeAccess().getMIXEDEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='BUBBLE'
			{
				$current = grammarAccess.getChartTypeAccess().getBUBBLEEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getChartTypeAccess().getBUBBLEEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='RADAR'
			{
				$current = grammarAccess.getChartTypeAccess().getRADAREnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getChartTypeAccess().getRADAREnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='AREA'
			{
				$current = grammarAccess.getChartTypeAccess().getAREAEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getChartTypeAccess().getAREAEnumLiteralDeclaration_7());
			}
		)
		    |
		(
			enumLiteral_8='DONUT'
			{
				$current = grammarAccess.getChartTypeAccess().getDONUTEnumLiteralDeclaration_8().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_8, grammarAccess.getChartTypeAccess().getDONUTEnumLiteralDeclaration_8());
			}
		)
	)
;

// Rule CompOperator
ruleCompOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='=='
			{
				$current = grammarAccess.getCompOperatorAccess().getEQUALEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompOperatorAccess().getEQUALEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='>'
			{
				$current = grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompOperatorAccess().getGREATEREnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='<'
			{
				$current = grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompOperatorAccess().getLESSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='!='
			{
				$current = grammarAccess.getCompOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompOperatorAccess().getNOT_EQUALEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>='
			{
				$current = grammarAccess.getCompOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCompOperatorAccess().getGREATER_OR_EQUALEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='<='
			{
				$current = grammarAccess.getCompOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getCompOperatorAccess().getLESS_OR_EQUALEnumLiteralDeclaration_5());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
